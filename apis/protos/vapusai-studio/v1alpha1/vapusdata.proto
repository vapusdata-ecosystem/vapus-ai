/**
 * @fileoverview
 * This file contains the protocol buffer definitions for the VapusDataPlatform API.
 * The VapusDataVapusdataService API allows users to create and manage data marketplacees, which are
 * virtualized data environments that provide a unified view of data from
 * multiple sources.
 *
 * @packageDocumentation
 */

syntax = "proto3";

import "google/api/annotations.proto";
// import "buf/validate/validate.proto";
import "protos/models/v1alpha1/common.proto";
import "protos/models/v1alpha1/vapusdata.proto";
import "protos/models/v1alpha1/enums.proto";

package aistudio.v1alpha1;

option go_package = "github.com/vapusdata-ecosystem/apis/protos/aistudio/v1alpha1";

/**
 * The VapusdataService is the main service interface for managing vapusdata services.
 * It provides methods for creating accounts, retrieving account information,
 * creating data marketplacees, storing data marketplace secrets, and retrieving data marketplace information.
 */
service VapusdataService {
    rpc PlatformPublicInfo(models.v1alpha1.EmptyRequest) returns (PlatformPublicInfoResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/public-info"
        };
    }

    /**
     * Retrieves information about theaccount.
     * @param {AccountManager} request - The account creation request.
     * @returns {AccountResponse} - The account creation response.
     */
    rpc AccountGetter(models.v1alpha1.EmptyRequest) returns (AccountResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/platform"
        };
    }

    /**
     * Creates a new account with the specified name.
     * @param {AccountManager} request - The account creation request.
     * @returns {AccountResponse} - The account creation response.
     */
    rpc AccountManager(AccountManagerRequest) returns (AccountResponse) {
        option (google.api.http) = {
            post: "/api/v1alpha1/platform"
            body: "*"
        };
    }

    /**
     * Retrieves information about platform services.
     * @param {VapusdataServicesRequest} request - The request object.
     * @returns {VapusdataServicesResponse} The response object containing the information about platform services.
     */
    rpc VapusdataServicesInfo(VapusdataServicesRequest) returns (VapusdataServicesResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/services"
        };
    }

    /**
     * Retrieves a sample resource configuration.
     * @param {SampleResourceConfigurationOptions} request - The request object containing the sample resource configuration options.
     * @returns {SampleResourceConfiguration} - The response object containing the sample resource configuration.
     */
    rpc GetSampleResourceConfiguration(SampleResourceConfigurationOptions) returns (SampleResourceConfiguration) {
        option (google.api.http) = {
            get: "/api/v1alpha1/sample-resources"
        };
    }

    /**
     * Retrieves information about the Developers (Resource and Enums).
    */
    rpc ResourceGetter(ResourceGetterRequest) returns (ResourceGetterResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/resources-spec"
        };
    }

     rpc EnumGetter(EnumGetterRequest) returns (EnumGetterResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/enums-spec"
        };
    }
}

service SecretService {
    /**
     * Stores the specified secrets.
     * @param {VapusSecretsRequest} request - The data marketplace secrets storage request.
     * @returns {VapusSecretsResponse} - The data marketplace secrets storage response.
     */
    rpc Create(SecretManagerRequest) returns (models.v1alpha1.VapusCreateResponse){
        option (google.api.http) = {
            post: "/api/v1alpha1/secrets"
            body: "*"
        };
    }
    rpc Update(SecretManagerRequest) returns (VapusSecretsResponse){
        option (google.api.http) = {
            put: "/api/v1alpha1/secrets"
            body: "*"
        };
    }
    rpc List(SecretGetterRequest) returns (VapusSecretsResponse){
        option (google.api.http) = {
            get: "/api/v1alpha1/secrets"
        };
    }
    rpc Get(SecretGetterRequest) returns (VapusSecretsResponse){
        option (google.api.http) = {
            get: "/api/v1alpha1/secrets/{name}"
        };
    }
    rpc Archive(SecretGetterRequest) returns (VapusSecretsResponse){
        option (google.api.http) = {
            delete: "/api/v1alpha1/secrets/{name}"
        };
    }
}

service UtilityService {
    rpc Upload(UploadRequest) returns(UploadResponse){
        option (google.api.http) = {
            post: "/api/v1alpha1/utility/upload"
            body: "*"
        };
    }

    rpc UploadStream(stream UploadRequest) returns(UploadResponse){
        option (google.api.http) = {
            post: "/api/v1alpha1/utility/upload-stream"
            body: "*"
        };
    }

    rpc Download(DownloadRequest) returns(DownloadResponse){
         option (google.api.http) = {
            get: "/api/v1alpha1/utility/download"
        };
    }
}

message UploadResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
    message ObjectUploadResult {
        models.v1alpha1.FileData object = 1; // @gotags: yaml:"object"
        string response_path = 2; // @gotags: yaml:"responsePath"
        string error = 3; // @gotags: yaml:"error"
        string fid = 4; // @gotags: yaml:"fid"
    }
    repeated ObjectUploadResult output = 2; // @gotags: yaml:"output"
}

message UploadRequest {
    repeated models.v1alpha1.FileData objects = 1; // @gotags: yaml:"objects"
    string resource = 2; // @gotags: yaml:"resource"
    string resource_id = 3; // @gotags: yaml:"resourceId"
}

message DownloadRequest {
    string file_path = 1; // @gotags: yaml:"filePath"
}

message DownloadResponse {
    string name = 1; //  @gotags: yaml:"name"
    bytes data = 2; //  @gotags: yaml:"data"
    models.v1alpha1.ContentFormats format = 3; //  @gotags: yaml:"format"
}

message SecretGetterRequest {
    string name = 1; // @gotags: yaml:"name"
    bool shared_with_me = 2; // @gotags: yaml:"sharedWithMe"
}

message SecretManagerRequest {
    models.v1alpha1.SecretStore spec = 1; // @gotags: yaml:"spec"
}

message VapusSecretsResponse{
     models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
    repeated models.v1alpha1.SecretStore output = 2; // @gotags: yaml:"output"
}

service PluginService {
    rpc Create(PluginManagerRequest) returns(models.v1alpha1.VapusCreateResponse) {
        option (google.api.http) = {
            post: "/api/v1alpha1/plugins"
            body: "*"
        };
    }
    rpc Update(PluginManagerRequest) returns(PluginResponse) {
        option (google.api.http) = {
            put: "/api/v1alpha1/plugins"
            body: "*"
        };
    }

    rpc Get(PluginGetterRequest) returns(PluginResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/plugins/{plugin_id}"
        };
    }

    rpc List(PluginGetterRequest) returns(PluginResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/plugins"
        };
    }

    rpc Archive(PluginGetterRequest) returns(PluginResponse) {
        option (google.api.http) = {
            delete: "/api/v1alpha1/plugins/{plugin_id}"
        };
    }
    
    rpc Action(PluginActionRequest) returns(PluginActionResponse) {}
}

enum PluginAgentAction {
    INVALID_PLUGIN_ACTION = 0;
    CONFIGURE_PLUGIN = 1;
    PATCH_PLUGIN = 2;
    DELETE_PLUGIN = 3;
    TEST_PLUGIN = 4;
}

enum AccountAgentActions {
    INVALID_ACCOUNT_ACTION = 0;
    CONFIGURE_AISTUDIO_MODEL = 1;
    UPDATE_PROFILE = 2;
}


message PlatformPublicInfoResponse {
    string logo = 1;
    string account_name = 2;
    string favicon = 3;
}

message VapusdataServicesRequest {}
message VapusdataServicesResponse {
    repeated models.v1alpha1.SvcNetworkParams network_params = 1;
}


/**
 * The AccountManagerRequest message contains the information required to create or retrieve an account.
 */
message AccountManagerRequest {
    AccountAgentActions actions = 1; // @gotags: yaml:"actions"
    models.v1alpha1.Account spec = 2; // @gotags: yaml:"spec"
}

/**
 * The AccountResponse message contains the response to an account creation or retrieval request.
 */
message AccountResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
    models.v1alpha1.Account output = 2; // @gotags: yaml:"output"
}

message SampleResourceConfigurationOptions {
    models.v1alpha1.ContentFormats format = 1; // @gotags: yaml:"format"
    models.v1alpha1.Resources request_obj = 2; // @gotags: yaml:"requestObj"
    bool populate_fake_data = 3; // @gotags: yaml:"populateFakeData"
}

message SampleResourceConfiguration {
    message ResourceConfigs {
        models.v1alpha1.Resources request_obj = 1; // @gotags: yaml:"requestObj"
        string file_content = 2; // @gotags: yaml:"fileContent"
        models.v1alpha1.ContentFormats format = 3; // @gotags: yaml:"format"
    }
     repeated ResourceConfigs output = 2; // @gotags: yaml:"output"

}

message PluginManagerRequest {
    PluginAgentAction action = 1; // @gotags: yaml:"action"
    models.v1alpha1.Plugin spec = 2; // @gotags: yaml:"spec"
}

message PluginGetterRequest {
    string plugin_id = 1; // @gotags: yaml:"pluginId"
    models.v1alpha1.SearchParam search_param = 2; // @gotags: yaml:"SearchParam"
}

message PluginResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
    repeated models.v1alpha1.Plugin output = 2; // @gotags: yaml:"output"
}

message SendEmailRequest {
    bytes spec = 1;
    string caller_agent_id = 2; // @gotags: yaml:"callerAgentId"
}

message SendEmailResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
}

message PluginActionRequest {
    string plugin_id = 1; // @gotags: yaml:"pluginId"
    string plugin_type = 2; // @gotags: yaml:"pluginType"
    bytes spec = 3; // @gotags: yaml:"spec"
    string caller_resource = 4; // @gotags: yaml:"calle;rResource"
    string caller_id = 5 ;// @gotags: yaml:"callerId"
    models.v1alpha1.ResourceLcActions action = 6; // @gotags: yaml:"action"
}

message PluginActionResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
}

message ResourceGetterRequest {
    models.v1alpha1.Resources resourse = 1; // @gotags: yaml:"resourse"
    string yaml_spec = 2; // @gotags: yaml:"yamlSpec"
    repeated string actions = 3; // @gotags: yaml:"actions"
}

message ResourceGetterResponse {
    repeated ResourceGetterRequest resource_response = 1; // @gotags: yaml:"resourceResponse"
    repeated EnumGetterRequest enum_response = 2; // @gotags: yaml:"enumResponse"
    repeated DataSourceTypeMap data_source_type_map = 3; // @gotags: yaml:"dataSourceTypeMap"
    repeated StorageEngineMap storage_engine_map = 4; // @gotags: yaml:"storageEngineMap"
    repeated StorageEngineLogoMap storage_engine_logo_map = 5; // @gotags: yaml:"storageEngineLogoMap"
    repeated DataSourceServicesLogoMap data_source_services_logo_map = 6; // @gotags: yaml:"dataSourceServicesLogoMap"
    repeated ServiceProviderLogoMap service_provider_logo_map = 7; // @gotags: yaml:"serviceProviderLogoMap"
    repeated PluginTypeMap plugin_type_map = 8; // @gotags: yaml:"pluginTypeMap"
    ThirdPartyGuardrailList guardrail_types = 9; // @gotags: yaml:"guardrailTypes"
}

message EnumGetterRequest {
    string name = 1; // @gotags: yaml:"name"
    repeated string value = 2; // @gotags: yaml:"value"
}

message EnumGetterResponse{
    repeated EnumGetterRequest enum_response = 1;   // @gotags: yaml:"enumResponse"
}

message DataSourceTypeMap {
    models.v1alpha1.DataSourceServices service = 1; // @gotags: yaml:"service"
    models.v1alpha1.DataSourceType source_type = 2; // @gotags: yaml:"sourceType"
}

message StorageEngineMap {
    models.v1alpha1.DataSourceServices service = 1; // @gotags: yaml:"service"
    string engine = 2;  // @gotags: yaml:"engine"
}

message StorageEngineLogoMap {
    string engine = 1;  // @gotags: yaml:"engine"
    string url = 2;  // @gotags: yaml:"url"
}

message DataSourceServicesLogoMap {
    models.v1alpha1.DataSourceServices service = 1; // @gotags: yaml:"service"
    string url = 2;  // @gotags: yaml:"url"
}

message ServiceProviderLogoMap {
    models.v1alpha1.ServiceProvider service_provider = 1; // @gotags: yaml:"serviceProvider"
    string url = 2;  // @gotags: yaml:"url"
}

message PluginTypeMap {
    models.v1alpha1.IntegrationPluginTypes plugin_types = 1; // @gotags: yaml:"pluginTypes"
    map<string, string> services = 2;  // @gotags: yaml: "services"
}

message ThirdPartyGuardrailList {
    repeated string pangea = 1; // @gotags: yaml:"pangea"
    repeated string mistral = 2; // @gotags: yaml:"mistral"
    repeated string bedrock = 3; // @gotags: yaml:"bedrock"
    repeated string vapus = 4; // @gotags: yaml:"vapus"
}